"use client";

import { useState } from "react";

import { usePathname } from "next/navigation";

import { Mic, SendHorizonal } from "lucide-react";

declare global {
  interface Window {
    SpeechRecognition: any;
    webkitSpeechRecognition: any;
  }
}


import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useEffect, useRef } from "react";

//  H√†m t√°ch ng√†y v√† gi·ªù
function extractDatetimeFromText(text: string) {
  // Regex kh·ªõp ƒë·ªãnh d·∫°ng: t·ª´ .. gi·ªù ƒë·∫øn .. gi·ªù ng√†y .. th√°ng .. nƒÉm ..
  const rangeRegex = /t·ª´\s+(\d{1,2})\s+gi·ªù\s+ƒë·∫øn\s+(\d{1,2})\s+gi·ªù.*?ng√†y\s+(\d{1,2})\s+th√°ng\s+(\d{1,2})\s+nƒÉm\s+(\d{4})/i;

  const match = text.match(rangeRegex);
  if (match) {
    const [, hourStart, hourEnd, day, month, year] = match.map(Number);
    const start = new Date(year, month - 1, day, hourStart);
    const end = new Date(year, month - 1, day, hourEnd);

    return {
      start: start.toISOString(),
      end: end.toISOString(),
    };
  }

  // N·∫øu kh√¥ng kh·ªõp "t·ª´ ... ƒë·∫øn ..." th√¨ th·ª≠ v·ªõi d·∫°ng ƒë∆°n l·∫ª: "l√∫c 9 gi·ªù ng√†y 28 th√°ng 5 nƒÉm 2025"
  const singleRegex = /l√∫c\s+(\d{1,2})\s+(?:gi·ªù|gi·ªù s√°ng|gi·ªù chi·ªÅu)?\s*(?:ng√†y)?\s*(\d{1,2})\s+(?:th√°ng)\s+(\d{1,2})\s+(?:nƒÉm)\s+(\d{4})/i;
  const match2 = text.match(singleRegex);
  if (match2) {
    const [, hour, day, month, year] = match2.map(Number);
    const start = new Date(year, month - 1, day, hour);
    const end = new Date(start.getTime() + 60 * 60 * 1000);

    return {
      start: start.toISOString(),
      end: end.toISOString(),
    };
  }

  // N·∫øu kh√¥ng kh·ªõp g√¨ th√¨ tr·∫£ v·ªÅ null
  return null;
}


type ChatMessage = {
  role: "user" | "gemini";
  content: string;
};

type InformationInputProps = {
  onSend: (message: string) => void;
};

export default function InformationInput({ chatId }: { chatId?: number }) {
  const pathname = usePathname();

  const [value, setValue] = useState("");
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [listening, setListening] = useState(false);
  const recognitionRef = useRef<any>(null);

  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY || "";
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

  useEffect(() => {
    if (typeof window === "undefined") return;

    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;

    if (!SpeechRecognition) {
      alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ mic.");
      return;
    }

    const recognition = new SpeechRecognition();
    recognition.lang = "vi-VN";
    recognition.interimResults = false;

    recognition.onresult = async (event: any) => {
      const transcript = event.results[0][0].transcript;
      console.log("üó£Ô∏è B·∫°n n√≥i:", transcript);
      handleSend(transcript);
    };

    recognition.onerror = (e: any) => {
      console.error("üé§ Mic l·ªói:", e.error);
    };

    recognitionRef.current = recognition;
  }, []);

  const toggleMic = () => {
    const recognition = recognitionRef.current;
    if (!recognition) return;

    if (listening) {
      recognition.stop();
      setListening(false);
    } else {
      recognition.start();
      setListening(true);
    }
  };

  // ‚úÖ H√†m g·ª≠i n·ªôi dung (ph√¢n t√≠ch v√† t·∫°o l·ªãch n·∫øu c·∫ßn)
  const handleSend = async (text: string) => {
    console.log("üëâ Ng∆∞·ªùi d√πng n√≥i/g√µ:", text);

    if (!text.trim()) return;

    const lower = text.toLowerCase();
    const isCalendar = lower.includes("l·ªãch") && lower.includes("calendar");
    const datetime = extractDatetimeFromText(text);

    setMessages((prev) => [...prev, { role: "user", content: text }]);

    if (isCalendar && datetime) {
      try {
        const res = await fetch("/api/calendar/create", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            summary: "L·ªãch t·ª± ƒë·ªông",
            description: text,
            startTime: datetime.start,
            endTime: datetime.end,
          }),
        });

        const data = await res.json();

        if (data.success || data.summary) {
          setMessages((prev) => [
            ...prev,
            { role: "gemini", content: `üìÖ ƒê√£ t·∫°o s·ª± ki·ªán tr√™n Google Calendar: ${data.summary || "L·ªãch m·ªõi"}` },
          ]);
        } else {
          setMessages((prev) => [
            ...prev,
            { role: "gemini", content: `‚ùå Kh√¥ng th·ªÉ t·∫°o s·ª± ki·ªán: ${data.error}` },
          ]);
        }
      } catch (err: any) {
        setMessages((prev) => [
          ...prev,
          { role: "gemini", content: `‚ö†Ô∏è Kh√¥ng th·ªÉ g·ªçi API l·ªãch: ${err.message}` },
        ]);
      }

      setValue("");
      return;
    }

    // ‚úÖ N·∫øu kh√¥ng ph·∫£i l·ªãch, g·ª≠i ƒë·∫øn Gemini API
    const res = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        contents: [{ parts: [{ text }] }],
      }),
    });

    const data = await res.json();
    const reply =
      data.candidates?.[0]?.content?.parts?.[0]?.text || "(Kh√¥ng c√≥ ph·∫£n h·ªìi)";

    setMessages((prev) => [...prev, { role: "gemini", content: reply }]);
    setValue("");
  };

  return (
    <div className="flex flex-col gap-y-4 max-w-2xl mx-auto w-full">
      <div className="border rounded p-4 bg-gray-50 min-h-[200px] max-h-[300px] overflow-y-auto space-y-2 mb-2 w-full">
        {messages.length === 0 && (
          <p className="text-sm text-gray-400">Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o...</p>
        )}
        {messages.map((msg, idx) => (
          <div key={idx} className="text-sm">
            <strong className={msg.role === "user" ? "text-blue-600" : "text-green-700"}>
              {msg.role === "user" ? "üßë B·∫°n" : "ü§ñ Gemini"}:
            </strong>{" "}
            {msg.content}
          </div>
        ))}
      </div>

      <div className="flex items-end justify-center gap-x-2">
        <Textarea
          value={value}
          onChange={(e) => {
            setValue(e.target.value);
          }}
          placeholder="Ask me anything"
          className="max-h-40 min-h-auto resize-none overflow-auto break-all"
        />

        {value.trim() === "" ? (
          <Button size="icon" onClick={toggleMic}>
            <Mic />
          </Button>
        ) : (
          <Button size="icon" onClick={() => handleSend(value)}>
            <SendHorizonal />
          </Button>
        )}
      </div>
    </div>
  );
}
